name: Publish Sphinx Docs to GitHub Pages

on: push
# TODO: build on conditions

defaults:
  run:
    shell: bash -l {0}

jobs:

  docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Checkout
      uses: actions/checkout@master
      with:
        fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

    - name: Install Sphinx build requirements
      run: |
        pip install pydata-sphinx-theme "sphinx<6" setuptools-scm

    - name: Install our package
      run: |
        pip install --no-deps -e . -vv

    - name: Make Temporary Directory for Sphinx content
      run: |
        echo "TEMPDIR=$(mktemp -d)" >> ${GITHUB_ENV}
        # next step also creates _version.py file
        echo "VERSION=$(./setup.py --version)" >> ${GITHUB_ENV}

    - name: Show Environment variables
      run: |
        echo "TEMPDIR=${TEMPDIR}"
        echo "VERSION=${VERSION}"

    - name: Sphinx
      run: |
        sphinx-build -M html ./docs/source "${TEMPDIR}/build"

    - name: Re-build the master directory (contains all documentation versions)
      run: |
        cp .github/index.html "${TEMPDIR}"

        cd "${TEMPDIR}"
        mv build/html "${VERSION}"
        ln -s "./${VERSION}" dev

        # add previous documentation (built versions)
        # update the switcher.json file before a new release
        wget https://github.com/prjemian/demo2301/archive/refs/heads/gh-pages.zip
        unzip -q gh-pages.zip
        /bin/rm gh-pages.zip

        # List of documentation versions to keep.
        # (should include all versions in switcher.json)
        # Adding future versions will capture that version
        # once it appears in the downloaded gh-pages branch.
        versions=
        versions+=" 0.0.4"
        versions+=" 0.0.5"
        versions+=" 0.0.6"
        versions+=" 1.0.0"
        versions+=" 1.0.1"
        versions+=" 1.0.2"
        for v in ${versions}
          do
              if [ -d "demo2301-gh-pages/${v}" ]
                then
                    echo "directory 'demo2301-gh-pages/${v}' exists"
                    mv "demo2301-gh-pages/${v}" ./
                    latest="${v}"
                fi
          done
        echo "latest=${latest}"
        ln -s "./${latest}" ./latest
        /bin/rm -rf demo2301-gh-pages

        /bin/rm -rf build

    - name: Info
      run: |
        cd "${TEMPDIR}"
        echo "pwd=$(pwd)"
        ls -laFGh

    # TODO: deploy on conditions
    - name: Deploy (to gh-pages branch) only on demand
      uses: peaceiris/actions-gh-pages@v3
      with:
        publish_branch: gh-pages
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: "${{ env.TEMPDIR }}"
        force_orphan: true
